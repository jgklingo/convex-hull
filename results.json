{
    "tests": [
        {
            "score": 0,
            "max_score": 5,
            "name": "test_convex_hull.py::test_uniform_distribution_small",
            "output": "\n@max_score(5)\n    def test_uniform_distribution_small():\n        points = generate_random_points('uniform', 10, 312)\n>       candidate_hull = compute_hull(points)\n\ntest_convex_hull.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npoints = [(0.3007744274329893, 0.3132617679517431), (-0.9352083990254623, -0.7037100296171235), (0.9419752393922489, -0.6149679...1749, -0.1178814154723431), (0.9342773303061289, 0.3788359442023279), (-0.33488336292954113, -0.6924621461985065), ...]\n\n    def compute_hull(points: list[tuple[float, float]]) -> list[tuple[float, float]]:\n        \"\"\"Return the subset of provided points that define the convex hull\"\"\"\n        if len(points) == 2 or len(points) == 3:\n            return base_convex_hull(points)\n    \n>       left_points, right_points = divide_points(points)\nE       TypeError: cannot unpack non-iterable NoneType object\n\nconvex_hull.py:50: TypeError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 15,
            "name": "test_convex_hull.py::test_uniform_distribution_large",
            "output": "\n@max_score(15)\n    def test_uniform_distribution_large():\n        points = generate_random_points('uniform', 20000, 312)\n>       candidate_hull = compute_hull(points)\n\ntest_convex_hull.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npoints = [(0.3007744274329893, 0.3132617679517431), (-0.9352083990254623, -0.7037100296171235), (0.9419752393922489, -0.6149679...1749, -0.1178814154723431), (0.9342773303061289, 0.3788359442023279), (-0.33488336292954113, -0.6924621461985065), ...]\n\n    def compute_hull(points: list[tuple[float, float]]) -> list[tuple[float, float]]:\n        \"\"\"Return the subset of provided points that define the convex hull\"\"\"\n        if len(points) == 2 or len(points) == 3:\n            return base_convex_hull(points)\n    \n>       left_points, right_points = divide_points(points)\nE       TypeError: cannot unpack non-iterable NoneType object\n\nconvex_hull.py:50: TypeError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 5,
            "name": "test_convex_hull.py::test_guassian_distribution_small",
            "output": "\n@max_score(5)\n    def test_guassian_distribution_small():\n        points = generate_random_points('guassian', 10, 312)\n>       candidate_hull = compute_hull(points)\n\ntest_convex_hull.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npoints = [(0.3005435600720992, 0.22994429312165263), (-0.1357789206879943, -0.8619315267105652), (-0.822659445855099, -0.844962...208, -0.2049886009086538), (-0.35972462576080066, -0.04695494869877755), (0.7215359777266964, -0.639798688747646), ...]\n\n    def compute_hull(points: list[tuple[float, float]]) -> list[tuple[float, float]]:\n        \"\"\"Return the subset of provided points that define the convex hull\"\"\"\n        if len(points) == 2 or len(points) == 3:\n            return base_convex_hull(points)\n    \n>       left_points, right_points = divide_points(points)\nE       TypeError: cannot unpack non-iterable NoneType object\n\nconvex_hull.py:50: TypeError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 15,
            "name": "test_convex_hull.py::test_guassian_distribution_large",
            "output": "\n@max_score(15)\n    def test_guassian_distribution_large():\n        points = generate_random_points('guassian', 20000, 312)\n>       candidate_hull = compute_hull(points)\n\ntest_convex_hull.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npoints = [(0.3005435600720992, 0.22994429312165263), (-0.1357789206879943, -0.8619315267105652), (-0.822659445855099, -0.844962...208, -0.2049886009086538), (-0.35972462576080066, -0.04695494869877755), (0.7215359777266964, -0.639798688747646), ...]\n\n    def compute_hull(points: list[tuple[float, float]]) -> list[tuple[float, float]]:\n        \"\"\"Return the subset of provided points that define the convex hull\"\"\"\n        if len(points) == 2 or len(points) == 3:\n            return base_convex_hull(points)\n    \n>       left_points, right_points = divide_points(points)\nE       TypeError: cannot unpack non-iterable NoneType object\n\nconvex_hull.py:50: TypeError",
            "visibility": "visible"
        }
    ]
}